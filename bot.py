import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import os

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = "8413313287:AAF1KLyKH7hl7W9gkokqWeE5RpCQQw0eZy8"
CHANNEL_USERNAME = "@nutritionpro"  # –Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel
CONSULT_LINK = "https://t.me/nutri_wayne"  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/yourusername

# ====== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.row(
    KeyboardButton("üìò5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏"),
    KeyboardButton("üìó–ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞ - –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–æ—Ä–º—ã, —Å–∏–º–ø—Ç–æ–º—ã –¥–µ—Ñ–∏—Ü–∏—Ç–∞"),
    KeyboardButton("üìï–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–∏ÃÜ, —á–∏—Å—Ç–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏")
)
main_keyboard.add(KeyboardButton("üí¨ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"))

# ====== –°–¢–ê–†–¢ ======
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> üëá"
    )

    check_sub_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"),
        InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=f"https://t.me/{CHANNEL_USERNAME.strip('@')}")
    )

    await message.answer(text, reply_markup=check_sub_button)

# ====== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ======
@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            await callback_query.message.answer(
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å üëá",
                reply_markup=main_keyboard
            )
        else:
            await callback_query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å üòî", show_alert=True)
    except Exception:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π.", show_alert=True)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –° –§–ê–ô–õ–ê–ú–ò ======
@dp.message_handler(lambda message: message.text == "üìò5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏")
async def send_5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏(message: types.Message):
    with open("files/5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏.pdf", "rb") as f:
        await message.answer_document(f, caption="üìò–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª!")

@dp.message_handler(lambda message: message.text == "üìó–ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞")
async def send_–ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞(message: types.Message):
    with open("files/–ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞.pdf", "rb") as f:
        await message.answer_document(f, caption="üìó–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª!")

@dp.message_handler(lambda message: message.text == "üìï–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–∏ÃÜ, —á–∏—Å—Ç–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏")
async def send_–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–∏ÃÜ, —á–∏—Å—Ç–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏(message: types.Message):
    with open("files/–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–∏ÃÜ, —á–∏—Å—Ç–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏.pdf", "rb") as f:
        await message.answer_document(f, caption="üìï–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª!")

# ====== –ö–ù–û–ü–ö–ê –ó–ê–ü–ò–°–ò ======
@dp.message_handler(lambda message: message.text == "üí¨ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
async def consultation_handler(message: types.Message):
    await message.answer(
        f"üóì –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª–∏—á–Ω–æ:\nüëâ <a href='{CONSULT_LINK}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç</a>",
        disable_web_page_preview=True
    )

# ====== –ó–ê–ü–£–°–ö ======
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
from aiohttp import web
import asyncio

async def run_fake_server():
    app = web.Application()
    app.router.add_get('/', lambda request: web.Response(text="Bot is running"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 10000)
    await site.start()

asyncio.get_event_loop().create_task(run_fake_server())
    executor.start_polling(dp, skip_updates=True)
