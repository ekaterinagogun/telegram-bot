import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web
import asyncio
import os

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = "8413313287:AAF1KLyKH7hl7W9gkokqWeE5RpCQQw0eZy8"
CHANNEL_USERNAME = "@nutritionpro"
CONSULT_LINK = "https://t.me/nutri_wayne"

# ====== –õ–û–ì–ò ======
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ====== –°–¢–ê–†–¢ ======
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> üëá"
    )

    check_sub_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"),
        InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=f"https://t.me/{CHANNEL_USERNAME.strip('@')}")
    )

    await message.answer(text, reply_markup=check_sub_button)

# ====== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ======
@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            await callback_query.message.answer("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –í–æ—Ç –º–æ–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üëá")

            # 1Ô∏è‚É£ 5 —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏
            steps_kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data="file_steps")
            )
            await bot.send_photo(
                user_id,
                photo="https://i.ibb.co/vYbJtLQ/steps.jpg",  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –æ–±–ª–æ–∂–∫—É
                caption="üìò <b>5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏</b>\n‚ú® –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞.",
                reply_markup=steps_kb
            )

            # 2Ô∏è‚É£ –ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞
            protein_kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data="file_protein")
            )
            await bot.send_photo(
                user_id,
                photo="https://i.ibb.co/yVbtpF5/protein.jpg",
                caption="üìó <b>–ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞</b>\nü•¶ –ü—Ä–æ–¥—É–∫—Ç—ã, –Ω–æ—Ä–º—ã –∏ —Å–∏–º–ø—Ç–æ–º—ã –¥–µ—Ñ–∏—Ü–∏—Ç–∞.",
                reply_markup=protein_kb
            )

            # 3Ô∏è‚É£ –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏
            skin_kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data="file_skin")
            )
            await bot.send_photo(
                user_id,
                photo="https://i.ibb.co/tZnH6GH/skin.jpg",
                caption="üìï <b>–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–π, —á–∏—Å—Ç–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏</b>\nüíß –ö–∞–∫ –ø–∏—Ç–∞–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —á–∏—Å—Ç–æ—Ç—É –∏ —Å–∏—è–Ω–∏–µ –∫–æ–∂–∏.",
                reply_markup=skin_kb
            )

            # üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            consult_kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üí¨ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url=CONSULT_LINK)
            )
            await bot.send_message(user_id, "üóì –ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –ª–∏—á–Ω–æ!", reply_markup=consult_kb)

        else:
            await callback_query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å üòî", show_alert=True)
    except Exception as e:
        logging.error(e)
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π.", show_alert=True)

# ====== INLINE-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –§–ê–ô–õ–û–í ======
@dp.callback_query_handler(lambda c: c.data == "file_steps")
async def send_steps(callback_query: types.CallbackQuery):
    try:
        with open("files/5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏.pdf", "rb") as f:
            await bot.send_document(callback_query.from_user.id, f, caption="üìò 5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏")
    except FileNotFoundError:
        await callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ üòî", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "file_protein")
async def send_protein(callback_query: types.CallbackQuery):
    try:
        with open("files/–ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞.pdf", "rb") as f:
            await bot.send_document(callback_query.from_user.id, f, caption="üìó –ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞")
    except FileNotFoundError:
        await callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ üòî", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "file_skin")
async def send_skin(callback_query: types.CallbackQuery):
    try:
        with open("files/–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–π, —á–∏—Å—Ç–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏.pdf", "rb") as f:
            await bot.send_document(callback_query.from_user.id, f, caption="üìï –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏")
    except FileNotFoundError:
        await callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ üòî", show_alert=True)

# ====== FAKE SERVER –î–õ–Ø RENDER ======
async def run_fake_server():
    app = web.Application()
    app.router.add_get('/', lambda request: web.Response(text="Bot is running"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 10000)
    await site.start()

if __name__ == "__main__":
    asyncio.get_event_loop().create_task(run_fake_server())
    executor.start_polling(dp, skip_updates=True)
