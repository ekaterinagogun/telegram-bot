import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = "8413313287:AAF1KLyKH7hl7W9gkokqWeE5RpCQQw0eZy8"
CHANNEL_USERNAME = "@nutritionpro"
CONSULT_LINK = "https://t.me/nutri_wayne"

# ====== –õ–û–ì–ò ======
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ====== –°–¢–ê–†–¢ ======
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"),
        InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=f"https://t.me/{CHANNEL_USERNAME.strip('@')}")
    )
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> üëá",
        reply_markup=kb
    )

# ====== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ======
@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        status = member.status
        if status in ["member", "administrator", "creator"]:
            await callback_query.message.answer("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –í–æ—Ç –º–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üëá")
            await send_materials(user_id)
        else:
            await callback_query.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        # –î–∞–∂–µ –µ—Å–ª–∏ Telegram –¥–∞—ë—Ç —Å–±–æ–π ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        await callback_query.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∫–∞–∑—ã–≤–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—Å—ë —Ä–∞–≤–Ω–æ üëá")
        await send_materials(user_id)

# ====== –ú–ê–¢–ï–†–ò–ê–õ–´ ======
async def send_materials(user_id):
    materials = [
        {
            "photo": "https://i.ibb.co/vYbJtLQ/steps.jpg",
            "caption": "üìò <b>5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏</b>\n‚ú® –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞.",
            "callback": "file_steps",
        },
        {
            "photo": "https://i.ibb.co/yVbtpF5/protein.jpg",
            "caption": "üìó <b>–ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞</b>\nü•¶ –ü—Ä–æ–¥—É–∫—Ç—ã, –Ω–æ—Ä–º—ã –∏ —Å–∏–º–ø—Ç–æ–º—ã –¥–µ—Ñ–∏—Ü–∏—Ç–∞.",
            "callback": "file_protein",
        },
        {
            "photo": "https://i.ibb.co/tZnH6GH/skin.jpg",
            "caption": "üìï <b>–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–π, —á–∏—Å—Ç–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏</b>\nüíß –ö–∞–∫ –ø–∏—Ç–∞–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —á–∏—Å—Ç–æ—Ç—É –∏ —Å–∏—è–Ω–∏–µ –∫–æ–∂–∏.",
            "callback": "file_skin",
        }
    ]

    for m in materials:
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data=m["callback"])
        )
        await bot.send_photo(
            user_id,
            photo=m["photo"],
            caption=m["caption"],
            reply_markup=kb
        )

    consult_kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí¨ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url=CONSULT_LINK)
    )
    await bot.send_message(user_id, "üóì –ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –ª–∏—á–Ω–æ!", reply_markup=consult_kb)

# ====== –û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–û–í ======
@dp.callback_query_handler(lambda c: c.data.startswith("file_"))
async def send_file(callback_query: types.CallbackQuery):
    files = {
        "file_steps": "files/5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏.pdf",
        "file_protein": "files/–ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞.pdf",
        "file_skin": "files/–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–π, —á–∏—Å—Ç–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏.pdf",
    }

    file_path = files.get(callback_query.data)
    if not file_path or not os.path.exists(file_path):
        await callback_query.answer("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ üòî", show_alert=True)
        return

    try:
        with open(file_path, "rb") as f:
            await bot.send_document(callback_query.from_user.id, f)
        await callback_query.answer("üì§ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ üò¢", show_alert=True)

# ====== FAKE SERVER –î–õ–Ø RENDER ======
async def run_fake_server():
    app = web.Application()
    app.router.add_get("/", lambda request: web.Response(text="Bot is running"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 10000)
    await site.start()

if __name__ == "__main__":
    asyncio.get_event_loop().create_task(run_fake_server())
    executor.start_polling(dp, skip_updates=True)
