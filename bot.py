import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = "8413313287:AAF1KLyKH7hl7W9gkokqWeE5RpCQQw0eZy8"
CHANNEL_USERNAME = "@nutritionpro"
CONSULT_LINK = "https://t.me/nutri_wayne"

# ====== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ====== –°–¢–ê–†–¢ ======
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> üëá"
    )

    check_sub_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"),
        InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=f"https://t.me/{CHANNEL_USERNAME.strip('@')}")
    )

    await message.answer(text, reply_markup=check_sub_button)

# ====== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ======
@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            await callback_query.message.answer(
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å üëá"
            )
            await send_file_buttons(callback_query.message.chat.id)
        else:
            await callback_query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å üòî", show_alert=True)
    except Exception:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π.", show_alert=True)

# ====== –ö–ù–û–ü–ö–ò –° –§–ê–ô–õ–ê–ú–ò ======
async def send_file_buttons(chat_id):
    files_markup = InlineKeyboardMarkup(row_width=1)
    files_markup.add(
        InlineKeyboardButton("üìò 5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏", callback_data="file_steps"),
        InlineKeyboardButton("üìó –ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞", callback_data="file_protein"),
        InlineKeyboardButton("üìï –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–π –∫–æ–∂–∏", callback_data="file_skin"),
        InlineKeyboardButton("üí¨ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url=CONSULT_LINK)
    )
    await bot.send_message(chat_id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=files_markup)

# ====== –û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–û–í ======
@dp.callback_query_handler(lambda c: c.data.startswith("file_"))
async def send_file(callback_query: types.CallbackQuery):
    mapping = {
        "file_steps": "files/5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏.pdf",
        "file_protein": "files/–ë–µ–ª–∫–æ–≤–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞.pdf",
        "file_skin": "files/–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–∏ÃÜ, —á–∏—Å—Ç–æ–π –∏ —Å–∏—è—é—â–µ–π –∫–æ–∂–∏.pdf"
    }

    path = mapping.get(callback_query.data)
    if not path or not os.path.exists(path):
        await callback_query.answer("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—É—Ç—å.", show_alert=True)
        return

    try:
        with open(path, "rb") as f:
            await bot.send_document(callback_query.from_user.id, f)
        await callback_query.answer("üì§ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ üò¢", show_alert=True)

# ====== FAKE SERVER (–¥–ª—è Render) ======
async def run_fake_server():
    app = web.Application()
    app.router.add_get('/', lambda request: web.Response(text="Bot is running"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 10000)
    await site.start()

if __name__ == "__main__":
    asyncio.get_event_loop().create_task(run_fake_server())
    executor.start_polling(dp, skip_updates=True)
